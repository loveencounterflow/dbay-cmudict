{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB;;EAC5B,UAAA,GAA4B,OAAA,CAAQ,gBAAR,EAjB5B;;;EAqBA,IAAC,CAAA,OAAD,CAAS,iBAAT,EAA4B;IAAA,KAAA,EAC1B;MAAA,eAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA9C;MACA,6BAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,MAArB;MAAT,CAD9C;MAEA,2BAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,IAArB;MAAT,CAF9C;MAGA,iCAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,UAAU,CAAC,GAAG,CAAC,WAAf,CAA2B,CAAC,CAAC,MAA7B;MAAT,CAH9C;MAIA,wBAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,OAAf;MAAT,CAJ9C;MAKA,4CAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;QAC5C,IAAe,CAAC,CAAC,eAAF,KAAqB,CAAC,KAArC;AAAA,iBAAO,KAAP;;AACA,eAAO,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAC,CAAC,eAAb;AACP,eAAO;MAHqC;IAL9C;EAD0B,CAA5B;AArBA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-CMUDICT/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\ndbay_types                = require 'dbay/lib/types'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'constructor_cfg', tests:\n  \"@isa.object x\":                              ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.prefix\":                ( x ) -> @isa.nonempty_text x.prefix\n  \"@isa.nonempty_text x.path\":                  ( x ) -> @isa.nonempty_text x.path\n  \"dbay_types.dbay_schema x.schema\":            ( x ) -> dbay_types.isa.dbay_schema x.schema\n  \"@isa.boolean x.rebuild\":                     ( x ) -> @isa.boolean x.rebuild\n  \"@x.max_entry_count is a float or +Infinity\": ( x ) ->\n    return true if x.max_entry_count is +Infinity\n    return @isa.float x.max_entry_count\n    return false\n\n"
  ]
}