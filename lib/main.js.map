{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-CMUDICT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\n\n\n#===========================================================================================================\nclass @Cmud\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:           null\n        prefix:       'cmud_'\n        schema:       'cmud'\n        path:         PATH.resolve PATH.join __dirname, '../cmudict.sqlite'\n        source_path:  PATH.resolve PATH.join __dirname, '../cmudict-0.7b'\n        arpaipa_path: PATH.resolve PATH.join __dirname, '../arpabet-to-ipa.tsv'\n        create:       false\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( me, cfg = null ) ->\n    clasz           = me.constructor\n    R               = cfg ? me.cfg\n    # #.......................................................................................................\n    # if R.path?\n    #   R.temporary  ?= false\n    #   R.path        = PATH.resolve R.path\n    # else\n    #   R.temporary  ?= true\n    #   filename        = me._get_random_filename()\n    #   R.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( me ) ->\n    ### called from constructor via `guy.cfg.configure_with_types()` ###\n    me.cfg        = @cast_constructor_cfg me\n    me.types.validate.constructor_cfg me.cfg\n    { db, }       = guy.obj.pluck_with_fallback me.cfg, null, 'db'\n    guy.props.def me, 'db', { enumerable: false, value: db, }\n    me.cfg        = guy.lft.freeze guy.obj.omit_nullish me.cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    guy.cfg.configure_with_types @, cfg, types\n    @_compile_sql()\n    @_create_sql_functions()\n    @_open_cmu_db()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix\n      schema } = @cfg\n    @db.execute SQL\"\"\"\n      create table if not exists #{schema}.entries (\n          id        integer not null primary key,\n          word      text    not null,\n          arpabet_s text    not null );\n      create index if not exists #{schema}.entries_word_idx\n        on entries ( word );\n      create table if not exists #{schema}.abipa (\n        cv          text    not null,\n        ab1         text,\n        ab2         text    not null primary key,\n        ipa         text    not null,\n        example     text    not null );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix\n      schema }  = @cfg\n    sql         =\n      get_db_object_count:  SQL\"select count(*) as count from #{schema}.sqlite_schema;\"\n      truncate_entries:     SQL\"delete from #{schema}.entries;\"\n      truncate_abipa:       SQL\"delete from #{schema}.abipa;\"\n      insert_entry: SQL\"\"\"\n        insert into #{schema}.entries ( word, arpabet_s )\n          values ( $word, $arpabet_s );\"\"\"\n      insert_abipa: SQL\"\"\"\n        insert into #{schema}.abipa ( cv, ab1, ab2, ipa, example )\n          values ( $cv, $ab1, $ab2, $ipa, $example );\"\"\"\n    guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix\n      schema } = @cfg\n    # #.......................................................................................................\n    # @dba.create_function\n    #   name:           \"#{prefix}_tags_from_id\",\n    #   deterministic:  true,\n    #   varargs:        false,\n    #   call:           ( id ) =>\n    #     fallbacks = @get_filtered_fallbacks()\n    #     tagchain  = @tagchain_from_id { id, }\n    #     tags      = @tags_from_tagchain { tagchain, }\n    #     return JSON.stringify { fallbacks..., tags..., }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_db_object_count: -> @db.single_value @sql.get_db_object_count\n  _truncate_entries:    -> @db @sql.truncate_entries\n  _truncate_abipa:      -> @db @sql.truncate_abipa\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_cmu_db: ->\n    @db.open @cfg\n    if @cfg.create or ( @_get_db_object_count() is 0 )\n      @_create_db_structure()\n      @_populate_db()\n    else\n      null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    # @_populate_entries()\n    @_populate_arpabet_to_ipa()\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_entries: ->\n    line_nr = 0\n    @_truncate_entries()\n    insert = @db.prepare @sql.insert_entry\n    @db =>\n      for line from guy.fs.walk_lines @cfg.source_path\n        line_nr++\n        continue if line.startsWith ';;;'\n        # break if line_nr > 10\n        line = line.trimEnd()\n        [ word, arpabet_s, ] = line.split '\\x20\\x20'\n        continue if ( word.endsWith \"'S\" ) or ( word.endsWith \"'\" )\n        continue if ( word.match /'S\\(\\d\\)$/ )?\n        unless word? and word.length > 0 and arpabet_s? and arpabet_s.length > 0\n          warn '^4443^', line_nr, ( rpr line )\n        insert.run { word, arpabet_s, }\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_arpabet_to_ipa: ->\n    @_truncate_abipa()\n    line_nr     = 0\n    ipa_by_ab2  = {}\n    insert      = @db.prepare @sql.insert_abipa\n    @db =>\n      for line from guy.fs.walk_lines @cfg.arpaipa_path\n        line_nr++\n        continue if line.startsWith '#'\n        fields            = line.split '\\t'\n        fields[ idx ]     = field.trim() for field, idx in fields\n        fields[ idx ]     = null for field, idx in fields when field is 'N/A'\n        [ cv\n          ab1\n          ab2\n          ipa\n          example ]       = fields\n        example           = example.replace /\\x20/g, ''\n        ipa_by_ab2[ ab2 ] = ipa\n        insert.run { cv, ab1, ab2, ipa, example, }\n      return null\n    ipa_by_ab2 = guy.lft.freeze ipa_by_ab2\n    guy.props.def @, 'ipa_by_ab2', { enumerable: false, value: ipa_by_ab2, }\n    return null\n\n\n\n\n\n\n\n"
  ]
}