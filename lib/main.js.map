{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-CMUDICT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\n\n\n#===========================================================================================================\nclass @Cmud\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:           null\n        prefix:       'cmud_'\n        schema:       'cmud'\n        path:         PATH.resolve PATH.join __dirname, '../cmudict.sqlite'\n        source_path:  PATH.resolve PATH.join __dirname, '../cmudict-0.7b'\n        create:       false\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( me, cfg = null ) ->\n    clasz           = me.constructor\n    R               = cfg ? me.cfg\n    # #.......................................................................................................\n    # if R.path?\n    #   R.temporary  ?= false\n    #   R.path        = PATH.resolve R.path\n    # else\n    #   R.temporary  ?= true\n    #   filename        = me._get_random_filename()\n    #   R.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( me ) ->\n    ### called from constructor via `guy.cfg.configure_with_types()` ###\n    me.cfg        = @cast_constructor_cfg me\n    me.types.validate.constructor_cfg me.cfg\n    { db, }       = guy.obj.pluck_with_fallback me.cfg, null, 'db'\n    guy.props.def me, 'db', { enumerable: false, value: db, }\n    me.cfg        = guy.lft.freeze guy.obj.omit_nullish me.cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    guy.cfg.configure_with_types @, cfg, types\n    @_compile_sql()\n    @_create_sql_functions()\n    @_open_cmu_db()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix\n      schema } = @cfg\n    @db.execute SQL\"\"\"\n      create table if not exists #{schema}.entries (\n          id        integer not null primary key,\n          word      text    not null,\n          arpabet_s text    not null );\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix\n      schema }  = @cfg\n    schema_i    = @db.sql.I schema\n    sql         =\n      get_db_object_count: SQL\"select count(*) as count from #{schema_i}.sqlite_schema;\"\n    guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix\n      schema } = @cfg\n    # #.......................................................................................................\n    # @dba.create_function\n    #   name:           \"#{prefix}_tags_from_id\",\n    #   deterministic:  true,\n    #   varargs:        false,\n    #   call:           ( id ) =>\n    #     fallbacks = @get_filtered_fallbacks()\n    #     tagchain  = @tagchain_from_id { id, }\n    #     tags      = @tags_from_tagchain { tagchain, }\n    #     return JSON.stringify { fallbacks..., tags..., }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_db_object_count: ->\n    @db.single_value @sql.get_db_object_count\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_cmu_db: ->\n    @db.open @cfg\n    if @cfg.create or ( @_get_db_object_count() is 0 )\n      @_create_db_structure()\n      @_populate_db()\n    else\n      null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    return null\n\n\n\n\n\n"
  ]
}