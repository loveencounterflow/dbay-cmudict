{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-CMUDICT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\nhome                      = PATH.resolve PATH.join __dirname, '..'\ndata_path                 = PATH.join home, 'data'\n\n#===========================================================================================================\nclass @Cmud\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    replacement:  '█'\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'cmud_'\n        schema:           'cmud'\n        path:             PATH.join home, 'cmudict.sqlite'\n        source_path:      PATH.join data_path, 'cmudict-0.7b'\n        abipa_path:       PATH.join data_path, 'arpabet-to-ipa.tsv'\n        xsipa_path:       PATH.join data_path, 'xsampa-to-ipa.tsv'\n        create:           false\n        max_entry_count:  Infinity\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( me, cfg = null ) ->\n    clasz           = me.constructor\n    R               = cfg ? me.cfg\n    # #.......................................................................................................\n    # if R.path?\n    #   R.temporary  ?= false\n    #   R.path        = PATH.resolve R.path\n    # else\n    #   R.temporary  ?= true\n    #   filename        = me._get_random_filename()\n    #   R.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( me ) ->\n    ### called from constructor via `guy.cfg.configure_with_types()` ###\n    me.cfg        = @cast_constructor_cfg me\n    me.types.validate.constructor_cfg me.cfg\n    { db, }       = guy.obj.pluck_with_fallback me.cfg, null, 'db'\n    me.cfg        = guy.lft.freeze guy.obj.omit_nullish me.cfg\n    guy.props.def me, 'db',     { enumerable: false, value: db, }\n    guy.props.def me, 'cache',  { enumerable: false, value: {}, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    guy.cfg.configure_with_types @, cfg, types\n    @_compile_sql()\n    @_create_sql_functions()\n    @_open_cmu_db()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix\n      schema } = @cfg\n    @db.execute SQL\"\"\"\n      drop index if exists #{schema}.entries_word_idx;\n      drop index if exists #{schema}.entries_ipa_idx;\n      drop table if exists #{schema}.trlits;\n      drop table if exists #{schema}.trlit_nicks;\n      drop table if exists #{schema}.abs_phones;\n      drop table if exists #{schema}.entries;\n      drop table if exists #{schema}.source_nicks;\n      -- ...................................................................................................\n      vacuum #{schema};\n      -- ...................................................................................................\n      create table #{schema}.entries (\n          id        integer not null primary key,\n          word      text    not null,\n          source    text    not null references source_nicks ( nick ),\n          ipa_raw   text    not null,\n          ipa       text    not null );\n      create index #{schema}.entries_word_idx on entries ( word );\n      create index #{schema}.entries_ipa_idx  on entries ( ipa );\n      -- ...................................................................................................\n      create table #{schema}.trlits ( -- trlits: transliterations\n          ipa         text    not null,\n          nick        text    not null references trlit_nicks ( nick ),\n          trlit       text    not null,\n          example     text,\n        primary key ( ipa, nick ) );\n      create table #{schema}.trlit_nicks (\n          nick        text    not null,\n          name        text    not null,\n          comment     text,\n        primary key ( nick ) );\n      create table #{schema}.source_nicks (\n          nick        text    not null,\n          name        text    not null,\n          comment     text,\n        primary key ( nick ) );\n      \"\"\"\n      # -- -- ...................................................................................................\n      # -- create view #{schema}.abs_phones as select\n      # --     r1.word   as word,\n      # --     r2.lnr    as lnr,\n      # --     r2.rnr    as rnr,\n      # --     r2.part   as abs1_phone\n      # --   from\n      # --     entries                           as r1,\n      # --     std_str_split_re( r1.abs1, '\\s' ) as r2;\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix\n      schema }  = @cfg\n    sql         =\n      get_db_object_count:  SQL\"select count(*) as count from #{schema}.sqlite_schema;\"\n      truncate_entries:     SQL\"delete from #{schema}.entries;\"\n      insert_entry: SQL\"\"\"\n        insert into #{schema}.entries ( word, source, ipa_raw, ipa )\n          values ( $word, $source, $ipa_raw, $ipa );\"\"\"\n      insert_trlit: SQL\"\"\"\n        insert into #{schema}.trlits ( ipa, nick, trlit, example )\n          values ( $ipa, $nick, $trlit, $example );\"\"\"\n      upsert_source_nick: SQL\"\"\"\n        insert into #{schema}.source_nicks ( nick, name, comment )\n          values ( $nick, $name, $comment )\n          on conflict ( nick ) do update set\n            name = excluded.name, comment = excluded.comment;\"\"\"\n      upsert_trlit_nick: SQL\"\"\"\n        insert into #{schema}.trlit_nicks ( nick, name, comment )\n          values ( $nick, $name, $comment )\n          on conflict ( nick ) do update set\n            name = excluded.name, comment = excluded.comment;\"\"\"\n      delete_arpabet_trlits: SQL\"\"\"\n        delete from #{schema}.trlits\n          where nick in ( 'ab1', 'ab2' );\n        \"\"\"\n      # insert_abs_phones: SQL\"\"\"\n      #   insert into #{schema}.abs_phones ( word, lnr, rnr, abs0_phone, abs1_phone, stress )\n      #     values ( $word, $lnr, $rnr, $abs0_phone, $abs1_phone, $stress );\"\"\"\n    guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix\n      schema } = @cfg\n    # #-------------------------------------------------------------------------------------------------------\n    # @db.create_function\n    #   name:           prefix + 'ipa_from_abs1'\n    #   deterministic:  true\n    #   varargs:        false\n    #   call:           ( abs1 ) => @ipa_from_abs1( abs1 )\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_db_object_count:   -> @db.single_value @sql.get_db_object_count\n  _truncate_entries:      -> @db @sql.truncate_entries\n  _delete_arpabet_trlits: -> @db @sql.delete_arpabet_trlits\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_cmu_db: ->\n    @db.open @cfg\n    if @cfg.create or ( @_get_db_object_count() is 0 )\n      @_create_db_structure()\n      @_populate_db()\n    else\n      null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    @_populate_arpabet_trlits()\n    # @_populate_xsampa_to_ipa()\n    @_populate_entries()\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_entries: ->\n    @_truncate_entries()\n    count         = 0\n    insert_entry  = @db.prepare @sql.insert_entry\n    source        = 'cmu'\n    @db @sql.upsert_source_nick, { nick: source, name: \"CMUdict\", comment: \"v0.7b\", }\n    @db =>\n      for line from guy.fs.walk_lines @cfg.source_path\n        continue if line.startsWith ';;;'\n        line                  = line.trimEnd()\n        [ word, ab, ]         = line.split '\\x20\\x20'\n        word                  = word.trim()\n        # continue if ( word.endsWith \"'S\" ) or ( word.endsWith \"'\" )\n        continue if ( word.match /'S\\(\\d\\)$/ )?\n        if ( not word? ) or ( word.length is 0 ) or ( not ab? ) or ( ab.length is 0 )\n          warn '^4443^', count, ( rpr line )\n          continue\n        #...................................................................................................\n        count++\n        if count > @cfg.max_entry_count\n          warn '^dbay-cmudict/main@1^', \"shortcutting at #{@cfg.max_entry_count} entries\"\n          break\n        word      = word.toLowerCase()\n        ipa_raw   = @ipa_raw_from_arpabet2  ab\n        ipa       = @ipa_from_ipa_raw       ipa_raw\n        insert_entry.run { word, source, ipa_raw, ipa, }\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_arpabet_trlits: ->\n    @_delete_arpabet_trlits()\n    line_nr       = 0\n    insert_trlit  = @db.prepare @sql.insert_trlit\n    @db @sql.upsert_trlit_nick, { nick: 'ab1', name: \"ARPAbet1\", comment: null, }\n    @db @sql.upsert_trlit_nick, { nick: 'ab2', name: \"ARPAbet2\", comment: null, }\n    @db =>\n      for line from guy.fs.walk_lines @cfg.abipa_path\n        line_nr++\n        line              = line.trim()\n        continue if line.length is 0\n        continue if line.startsWith '#'\n        fields            = line.split '\\t'\n        fields[ idx ]     = field.trim() for field, idx in fields\n        fields[ idx ]     = null for field, idx in fields when field is 'N/A'\n        [ cv\n          ab1\n          ab2\n          ipa\n          example ]       = fields\n        ab1               = ab1.toLowerCase() if ab1\n        ab2               = ab2.toLowerCase()\n        example           = example.replace /\\x20/g, ''\n        insert_trlit.run { ipa, nick: 'ab1', trlit: ab1, example, } if ab1?\n        insert_trlit.run { ipa, nick: 'ab2', trlit: ab2, example, }\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _undoublequote: ( text ) ->\n    return text unless text[ 0                          ] is '\"'\n    return text unless text[ last_idx = text.length - 1 ] is '\"'\n    return text[ 1 ... last_idx ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_xsampa_to_ipa: ->\n    @_truncate_xsipa()\n    line_nr     = 0\n    xs_by_ipa   = {} ### #cache ###\n    insert      = @db.prepare @sql.insert_xsipa\n    @db =>\n      for line from guy.fs.walk_lines @cfg.xsipa_path\n        line_nr++\n        line              = line.trim()\n        continue if line.length is 0\n        continue if line.startsWith '#'\n        fields            = line.split '\\t'\n        fields[ idx ]     = field.trim() for field, idx in fields\n        # fields[ idx ]     = null for field, idx in fields when field is 'N/A'\n        [ xs\n          ipa\n          _\n          description\n          example ]       = fields\n        example          ?= \"(no example)\"\n        example           = @_undoublequote example\n        example           = example.replace /\\\\\"/g, '\"'\n        xs_by_ipa[ ipa ]  = xs ### #cache ###\n        insert.run { description, xs, ipa, example, }\n      return null\n    xs_by_ipa = guy.lft.freeze xs_by_ipa ### #cache ###\n    guy.props.def @, 'xs_by_ipa', { enumerable: false, value: xs_by_ipa, } ### #cache ###\n    return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  # ipa_from_arpabet_s_1: ( abs0 ) ->\n  #   R = abs0.replace /\\b[\\S]+?\\b/g, ( match ) =>\n  #     match = match.replace /\\d+$/, ''\n  #     return @ipa_by_ab2[ match ] ? '?'\n  #   return R.replace /\\s/g, ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_cache_ipa_raw_from_arpabet2: ->\n    R = {}\n    for row from @db SQL\"select * from #{@cfg.schema}.trlits where nick = 'ab2';\"\n      R[ row.trlit ] = row.ipa\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  ipa_raw_from_arpabet2: ( ab ) ->\n    cache       = ( @cache.ipa_raw_from_arpabet2 ?= @_build_cache_ipa_raw_from_arpabet2() )\n    replacement = @constructor.C.replacement\n    R           = []\n    ab          = ab.trim().toLowerCase()\n    for phone in ab.split /\\x20+/\n      stress  = null\n      if ( match = phone.match /^(?<base>\\D+)(?<level>\\d*)$/ )?\n        { base\n          level } = match.groups\n        for letter in Array.from ( cache[ base ] ? replacement )\n          R.push letter + level\n      else\n        R.push cache[ phone ] ? replacement\n    return R.join ' '\n\n  # #---------------------------------------------------------------------------------------------------------\n  # xsampa_from_ipa: ( ipa ) ->\n  #   R = ( d for d in ( Array.from ipa ) when d not in [ '̲', '̤', ] )\n  #   return ( @xs_by_ipa[ letter ] ? '█' for letter, idx in R ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  ipa_from_ipa_raw: ( ipa_raw ) ->\n    R = ipa_raw\n    R = ',' + ( R.replace /\\x20+/g, ',' ) + ','\n    R = R.replace /,ʌ([02]),/g,     ',ə$1,'\n    R = R.replace /,ɝ0,/g,          ',ə0,r,'\n    R = R.replace /,ɝ1,/g,          ',ɜ1,r,'\n    R = R.replace /,ɝ2,/g,          ',ɜ2,r,'\n    R = R.replace /,/g,             ''\n    R = R.replace /0/g,             ''\n    R = R.replace /1/g,             '̲'\n    R = R.replace /2/g,             '̤'\n    return R\n\n\n"
  ]
}